{"version":3,"sources":["routes/AuthForm.js","routes/Auth.js","fbase.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccout","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","auth","getAuth","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","dbService","getFirestore","storageService","getStorage","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","TweetTextRef","doc","id","deleteDoc","attachmentUrl","deleteObject","ref","toggleEditing","updateDoc","autoFocus","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","fileRef","uid","uuidv4","uploadString","uploadFile","getDownloadURL","createdAt","Date","now","creatorId","addDoc","collection","docRef","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","query","orderBy","snapshot","tweetArray","docs","map","marginTop","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","getMyTweets","q","where","getDocs","forEach","updateProfile","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","from","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd491da0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n    getAuth,\r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n} from \"firebase/auth\";\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [newAccount, setNewAccout] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === 'email') {\r\n            setEmail(value);\r\n        } else if(name ==='password') {\r\n            setPassword(value);\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const auth = getAuth();\r\n        try {\r\n            let data;\r\n            if(!newAccount) {\r\n                // create account\r\n                data = await createUserWithEmailAndPassword(\r\n                    auth, email, password\r\n                )\r\n            } else {\r\n                data = await signInWithEmailAndPassword(\r\n                    auth, email, password\r\n                )\r\n            }\r\n            console.log(data);\r\n        } catch(error) {\r\n            setError(error.message);\r\n        }\r\n    }\r\n\r\n    const toggleAccount = () => {\r\n        setNewAccout(prev => !prev);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={onSubmit} className=\"container\">\r\n                <input\r\n                    name=\"email\" \r\n                    type=\"email\" \r\n                    placeholder=\"Email\" \r\n                    required \r\n                    value={email}\r\n                    onChange={onChange}\r\n                    className=\"authInput\"\r\n                />\r\n                <input\r\n                    name=\"password\" \r\n                    type=\"password\" \r\n                    placeholder=\"Password\" \r\n                    required \r\n                    value={password}\r\n                    onChange={onChange}\r\n                    className=\"authInput\"\r\n                />\r\n                <input type=\"submit\" className=\"authInput authSubmit\" value={newAccount ? \"Create Account\" : \" Log In\"} />\r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ? \"Log in\" : \"Create Account\"}</span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthForm;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {\r\n    getAuth,\r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    GoogleAuthProvider,\r\n    GithubAuthProvider,\r\n    signInWithPopup\r\n} from \"firebase/auth\";\r\nimport AuthForm from \"./AuthForm\";\r\n\r\nconst Auth = () => {\r\n\r\n    const onSocialClick = async (event) => {\r\n        const {target: {name}} = event;\r\n        let provider;\r\n        if(name === \"google\") {\r\n            provider = new GoogleAuthProvider();\r\n        } else if(name === \"github\") {\r\n            provider = new GithubAuthProvider();\r\n        }\r\n\r\n        const auth = getAuth();\r\n        const data = await signInWithPopup(auth, provider)\r\n        console.log(data);\r\n    }\r\n    return (\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon\r\n                icon={faTwitter}\r\n                color={\"#04AAFF\"}\r\n                size=\"3x\"\r\n                style={{ marginBottom: 30 }}\r\n            />\r\n            <AuthForm/>\r\n            <div className=\"authBtns\">\r\n            <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n            </button>\r\n            <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n            </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Auth;","import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport * as firebase from \"firebase/app\";\r\nimport {getFirestore} from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport default app;\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = getAuth(app);\r\n\r\nexport const dbService = getFirestore();\r\n\r\nexport const storageService = getStorage();","import React, { useState } from \"react\";\r\nimport { doc, deleteDoc, updateDoc } from \"firebase/firestore\";\r\nimport { deleteObject, ref} from \"@firebase/storage\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this tweet\");\r\n        if(ok) {\r\n            const TweetTextRef = doc(dbService, \"tweets\", `${tweetObj.id}`);\r\n            await deleteDoc(TweetTextRef);\r\n            if(tweetObj.attachmentUrl) {\r\n                await deleteObject(ref(storageService, tweetObj.attachmentUrl));\r\n            }\r\n            //delete\r\n        }\r\n    };\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const TweetTextRef = doc(dbService, \"tweets\", `${tweetObj.id}`);\r\n        await updateDoc(TweetTextRef, {\r\n            text: newTweet,\r\n        });\r\n        setEditing(false);\r\n    }\r\n    const onChange = (event) => {\r\n        const {\r\n            target:{value},\r\n        } = event;\r\n        setNewTweet(value);\r\n    };\r\n    return (\r\n        <div className=\"nweet\">\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n                        <input \r\n                            type=\"text\"\r\n                            placeholder=\"Edit your Tweet\"\r\n                            value={newTweet}\r\n                            required\r\n                            autoFocus\r\n                            onChange={onChange}\r\n                            className=\"formInput\" \r\n                        />\r\n\r\n                        <input type=\"submit\" value=\"Edit\" className=\"formBtn\"></input>\r\n                    </form>\r\n                    <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                        Cancel\r\n                    </span>\r\n                </>\r\n            ) : (\r\n            <>\r\n                <h4>{tweetObj.text}</h4>\r\n                {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl} />}\r\n                {isOwner && (\r\n                    <div className=\"tweet__actions\">\r\n                        <span onClick={onDeleteClick}>\r\n                            <FontAwesomeIcon icon={faTrash} />\r\n                        </span>\r\n                        <span onClick={toggleEditing}>\r\n                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                        </span>\r\n                    </div>\r\n                )}\r\n            </>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tweet;","import { v4 as uuidv4 } from \"uuid\";\r\nimport React, { useState } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { addDoc, collection, getDocs, query, onSnapshot, orderBy } from \"firebase/firestore\";\r\nimport { uploadString, ref,getDownloadURL} from \"firebase/storage\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n    const [tweet, setTweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        if (tweet === \"\") {\r\n            return;\r\n          }\r\n        event.preventDefault();\r\n    \r\n        let attachmentUrl = \"\";\r\n        if(attachment !== \"\") {\r\n            const fileRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\r\n            const uploadFile = await uploadString(fileRef, attachment, \"data_url\");\r\n            attachmentUrl = await getDownloadURL(uploadFile.ref);\r\n        }\r\n        const tweetObj = {\r\n            text: tweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl\r\n        }\r\n         try {\r\n            const docRef = await addDoc(collection(dbService, \"tweets\"), tweetObj);\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n        } catch(error) {\r\n            console.error(\"Error adding document: \", error);\r\n        }\r\n    \r\n        setTweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n    const onChange = ({target: {value}}) => {\r\n        setTweet(value);\r\n    };\r\n    const onFileChange = (event) => {\r\n        const {target:{files}} = event; // event.target.files\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {currentTarget: {result}} = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    };\r\n    const onClearPhotoClick = () => setAttachment(\"\");\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input\r\n                    className=\"factoryInput__input\"\r\n                    value={tweet}\r\n                    onChange={onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    maxLength={120}\r\n                />\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n            </div>\r\n            <label for=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n        <input\r\n            id=\"attach-file\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={onFileChange}\r\n            style={{\r\n            opacity: 0,\r\n            }}\r\n        />\r\n        {attachment && \r\n            <div>\r\n                <img src={attachment} style={{backgroundImage: attachment,}} />\r\n                <div className=\"factoryForm__clear\" onClick={onClearPhotoClick}>\r\n                    <span>Remove</span>\r\n                    <FontAwesomeIcon icon={faTimes} />\r\n                </div>\r\n            </div>\r\n        }\r\n    </form>\r\n    );\r\n}\r\nexport default TweetFactory;","import React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { addDoc, collection, getDocs, query, onSnapshot, orderBy } from \"firebase/firestore\";\r\nimport Tweet from \"components/Tweet\";\r\nimport { uploadString, ref,getDownloadURL} from \"firebase/storage\";\r\nimport TweetFactory from \"components/TweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n\r\n    const [tweets, setTweets] = useState([]);\r\n    useEffect(() => {\r\n        onSnapshot(\r\n            query(collection(dbService, \"tweets\"), orderBy(\"createdAt\", \"desc\")),\r\n                (snapshot) => {\r\n                    const tweetArray = snapshot.docs.map((doc) => ({\r\n                    id: doc.id,\r\n                    ...doc.data(),\r\n                }));\r\n            setTweets(tweetArray);\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <TweetFactory userObj={userObj} />\r\n            <div style={{ marginTop: 30 }}>\r\n                {tweets.map((tweet) => (\r\n                    <Tweet key={tweet.id} tweetObj={tweet} isOwner={(tweet.creatorId === userObj.uid) ? true : false}></Tweet>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst Navigation = ({userObj}) => (\r\n    <nav>\r\n        <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n            <li>\r\n                <Link to=\"/\" style={{ marginRight: 10 }}>\r\n                    <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n                </Link>\r\n            </li>\r\n            <li>\r\n            <Link\r\n                to=\"/profile\"\r\n                style={{\r\n                    marginLeft: 10,\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    fontSize: 12,\r\n                }}\r\n                >\r\n                <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n                <span style={{ marginTop: 10 }}>\r\n                    {userObj.displayName\r\n                    ? `${userObj.displayName}의 Profile`\r\n                    : \"Profile\"}\r\n                </span>\r\n            </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)\r\nexport default Navigation;","import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { updateProfile } from \"firebase/auth\";\r\n\r\nexport default ({ refreshUser, userObj}) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n    const getMyTweets = async () => {\r\n        const q = query(\r\n            collection(dbService, \"nweets\"),\r\n            where(\"creatorId\", \"==\", userObj.uid),\r\n        );\r\n        const querySnapshot = await getDocs(q);\r\n        querySnapshot.forEach((doc) => {\r\n            console.log(doc.id, \" => \", doc.data());\r\n        });\r\n    };\r\n    const onChange = (event) => {\r\n        const {\r\n            target: {value},\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName) {\r\n            await updateProfile(userObj, {displayName:newDisplayName});\r\n        }\r\n        refreshUser();\r\n    }\r\n    useEffect(() => {\r\n        getMyTweets();\r\n    }, [])\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n            <input\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                autoFocus\r\n                placeholder=\"Display name\"\r\n                value={newDisplayName}\r\n                className=\"formInput\"\r\n            />\r\n            <input\r\n                type=\"submit\"\r\n                value=\"Update Profile\"\r\n                className=\"formBtn\"\r\n                style={{\r\n                    marginTop: 10,\r\n                }}\r\n            />\r\n        </form>     \r\n        <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n            Log Out\r\n        </span>\r\n    </div>\r\n    );\r\n};","import {React, useState} from \"react\";\r\nimport {HashRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport { authService } from \"fbase\";\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from \"routes/Profile.js\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ?\r\n                    <div\r\n                        style={{\r\n                        maxWidth: 890,\r\n                        width: \"100%\",\r\n                        margin: \"0 auto\",\r\n                        marginTop: 80,\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj = {userObj}></Home>\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile userObj={userObj} refreshUser={refreshUser}></Profile>\r\n                        </Route>\r\n                    </div>\r\n                     : (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Auth></Auth>\r\n                        </Route>\r\n                        <Redirect from=\"*\" to=\"/\" />\r\n                    </>\r\n                    )}\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","import {React, useEffect, useState} from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    })\n  }, [])\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (\n    <>\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={isLoggedIn} userObj={userObj}></AppRouter> : \"Initializing...\"}\n      {/* <footer>&copy; Twitter {new Date().getFullYear()}</footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport fbase from \"fbase\";\nimport \"styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}